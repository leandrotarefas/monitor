import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import lombok.Data;

@Data
@Document(collection = "messages")
public class Message {
    @Id
    private String id;
    private String content;
}



import org.springframework.data.mongodb.repository.MongoRepository;

public interface MessageRepository extends MongoRepository<Message, String> {
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class MessageService {
    @Autowired
    private MessageRepository messageRepository;

    public Message saveMessage(Message message) {
        return messageRepository.save(message);
    }
}


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class SocketServer {
    @Autowired
    private MessageService messageService;

    public void startServer() {
        try (ServerSocket serverSocket = new ServerSocket(3000)) {
            while (true) {
                try (Socket clientSocket = serverSocket.accept();
                     BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                     PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true)) {

                    String inputLine;
                    while ((inputLine = in.readLine()) != null) {
                        Message message = new Message();
                        message.setContent(inputLine);
                        messageService.saveMessage(message);
                        out.println("Mensagem recebida: " + inputLine);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class SocketServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(SocketServerApplication.class, args);
    }

    @Bean
    CommandLineRunner startSocketServer(SocketServer socketServer) {
        return args -> {
            socketServer.startServer();
        };
    }
}



