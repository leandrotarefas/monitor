const express = require('express');
const bodyParser = require('body-parser');
const mq = require('ibmmq');

const app = express();
app.use(bodyParser.json());

// Configuração das opções de conexão do IBM MQ
const connOptions = {
  MQC: mq.MQC,
  queueManager: 'YOUR_QUEUE_MANAGER',
  channelName: 'YOUR_CHANNEL_NAME',
  connName: 'YOUR_CONNECTION_NAME',
  user: 'YOUR_USERNAME',
  password: 'YOUR_PASSWORD',
};

let hConn;
let hObj;

// Função para enviar mensagem para IBM MQ
async function sendToMQ(message) {
  return new Promise((resolve, reject) => {
    const mqmd = new mq.MQMD();
    const pmo = new mq.MQPMO();

    mq.Put(hObj, mqmd, pmo, message, (err) => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

app.post('/send', async (req, res) => {
  const message = JSON.stringify(req.body);

  try {
    await sendToMQ(message);
    console.log('Message sent to IBM MQ.');
    res.status(200).send('Message sent successfully');
  } catch (error) {
    console.log(`Error putting message: ${error.message}`);
    res.status(500).send('Error putting message');
  }
});

const port = process.env.PORT || 3000;

(async function init() {
  try {
    mq.setTuningParameters({ maxInFlight: 1 });

    hConn = await new Promise((resolve, reject) => {
      mq.Connx(connOptions.queueManager, connOptions, (err, hConn) => {
        if (err) {
          console.log(`Error connecting to IBM MQ: ${err.message}`);
          reject(err);
        } else {
          resolve(hConn);
        }
      });
    });

    console.log('Connected to IBM MQ.');

    hObj = await new Promise((resolve, reject) => {
      const openOptions = connOptions.MQC.MQOO_OUTPUT;
      mq.Open(hConn, { ObjectType: connOptions.MQC.MQOT_Q, ObjectName: 'YOUR_QUEUE_NAME' }, openOptions, (err, hObj) => {
        if (err) {
          console.log(`Error opening queue: ${err.message}`);
          reject(err);
        } else {
          resolve(hObj);
        }
      });
    });

    console.log('Queue opened.');

    app.listen(port, () => {
      console.log(`Server is running on port ${port}`);
    });

  } catch (error) {
    console.log(`Error during initialization: ${error.message}`);
    process.exit(1);
  }
})();
